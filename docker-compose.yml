services:
  database:
    image: postgres:17-alpine
    ports:
      - 25432:5432
    environment:
      POSTGRES_DB: blockvisor_db
      POSTGRES_USER: blockvisor
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U blockvisor -d blockvisor_db" ]
      interval: 5s
      timeout: 5s
      retries: 5

  emqx:
    image: emqx/emqx-enterprise:5.8.1
    ports:
      - 1883:1883
      - 8083:8083
      - 8084:8084
      - 8883:8883
      - 18083:18083

  api:
    image: api:latest
    build:
      context: ./api/
      dockerfile: ./docker/Dockerfile
    pull_policy: never
    ports:
      - 8080:8080
    environment:
      RUST_LOG: debug,blockvisor=debug
      EMAIL_TEMPLATE_DIR: /emails
      CHARGEBEE_SECRET: asdfasdf
      STRIPE_SECRET: sk_test_stipesecretkeygoeshere
      STRIPE_URL: https://localhost:3001
      DATABASE_URL: postgres://blockvisor:password@database:5432/blockvisor_db
      TOKEN_EXPIRATION_MINS: 10
      REFRESH_EXPIRATION_USER_MINS: 1200
      REFRESH_EXPIRATION_HOST_MINS: 120000
      PWD_RESET_EXPIRATION_MINS: 5
      REGISTRATION_CONFIRMATION_MINS: 30
      INVITATION_MINS: 10080
      JWT_SECRET: 1245456
      REFRESH_SECRET: 23942390
      UI_BASE_URL: http://0.0.0.0
      # cookbook service
      AWS_ACCESS_KEY_ID: ${S3_COMPATIBLE_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${S3_COMPATIBLE_SECRET_KEY}
      AWS_REGION: us-west-000
      STORAGE_URL: ${S3_COMPATIBLE_STORAGE_URL}
      BUNDLE_BUCKET: ${BUNDLE_BUCKET_NAME}
      ARCHIVE_BUCKET: ${ARCHIVES_BUCKET_NAME}
      DIR_CHAINS_PREFIX: chains
      PRESIGNED_URL_EXPIRATION: 8h
      # mqtt
      MQTT_SERVER_ADDRESS: emqx
      MQTT_SERVER_PORT: 1883
      MQTT_USERNAME: admin
      MQTT_PASSWORD: public
      # cloudflare
      CF_BASE_URL: https://api.cloudflare.com/client/v4
      CF_ZONE: ${CF_ZONE}
      CF_DNS_BASE: blockvisor.dev
      CF_TTL: 300
      CF_TOKEN: ${CF_TOKEN}
      CLOUDFLARE_CERT_KEY: sneaky-fake-cert
      LOG_ENVIRONMENT: production
      OPENTELEMETRY_ENDPOINT: http://opentelemetry:4317
      GRAFANA_PROMETHEUS_KEY: no-fire-for-you
      GRAFANA_BASIC_AUTH_KEY: thats-soooo-basic
      GRAFANA_LOKI_KEY: grafana-no-loki

    depends_on:
      database:
        condition: service_healthy

  envoy:
    image: envoyproxy/envoy:v1.24-latest
    volumes:
      - ./setup/envoy.yaml:/etc/envoy/envoy.yaml
    ports:
      - 8090:8090
      - 9901:9901

  web:
    image: web:latest
    build:
      context: ./web/
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: "/api"
        NEXT_PUBLIC_MQTT_URL: "/mqtt"
        NEXT_PUBLIC_VERCEL_ENV: "production"
        NEXT_PUBLIC_LOADING_DURATION: "200"

        NEXT_PUBLIC_STRIPE_KEY: "pk_test_stripepublickeygoeshere"

    pull_policy: never
    ports:
      - 3000:3000
  
  init:
    image: init:latest
    build:
      context: ./setup/init/
    pull_policy: never
    depends_on:
      - database
      - api
    environment:
      FIRST_NAME: ${API_USER_FIRST_NAME}
      LAST_NAME: ${API_USER_LAST_NAME}
      EMAIL: ${API_USER_EMAIL}
      PASSWORD: ${API_USER_PASSWORD}
    stdin_open: true
    tty: true

  proxy:
    image: caddy:latest
    build:
      context: ./setup/caddy/
    pull_policy: never
    ports:
      - 80:80

  grafana:
    image: grafana/grafana:11.3.1
    ports:
      - 23000:3000
    environment:
      GF_SERVER_ROOT_URL: "http://grafana/grafana"
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_LIVE_ALLOWED_ORIGINS: "*"
    volumes:
      - ./setup/grafana.yaml:/etc/grafana/provisioning/datasources/prometheus.yaml
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:v3.0.0
    ports:
      - 29090:9090
    volumes:
      - ./setup/prometheus.yaml:/etc/prometheus/prometheus.yml
    depends_on:
      - opentelemetry

  opentelemetry:
    image: otel/opentelemetry-collector-contrib:0.113.0
    command: [ "--config=/etc/opentelemetry.yaml" ]
    ports:
      - 24317:4317
      - 28889:8889
    volumes:
      - ./setup/opentelemetry.yaml:/etc/opentelemetry.yaml
    depends_on:
      - loki
      - tempo

  loki:
    image: grafana/loki:3.3.0
    ports:
      - 23100:3100

  tempo:
    image: grafana/tempo:2.6.1
    ports:
      - 23200:3200
    command: -config.file=/etc/tempo/tempo.yaml
    volumes:
      - ./setup/tempo.yaml:/etc/tempo/tempo.yaml
